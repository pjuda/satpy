'''Try out to use only some parts of jussi's code to start with... '''

import os
import pickle
import sys
from datetime import datetime, timedelta
from glob import glob

import cartopy
import matplotlib
import matplotlib.pyplot as plt
import numpy
import pandas
import pyproj
from config import MTGDIR, OUTDIR, PATH_CTH_PAL, RADIUS_OF_INFLUENCE
from matplotlib.ticker import FuncFormatter
from pyorbital.orbital import A as EARTH_RADIUS
from pyorbital.orbital import get_observer_look
from pyresample import load_area

from satpy import Scene, find_files_and_readers
from satpy.utils import get_satpos, lonlat2xyz, xyz2lonlat

from satpy.modifiers.parallax import get_parallax_corrected_lonlats

from utils import (
    define_cth_colorbar,
    get_MTG_filenames,
    handle_missing_heights,
    initialize_mtg_df_in_target_proj,
    lonlat_to_proj,
    parallax_correct,
    ticks_meter_to_km,
    time_of_interest_from_prompt,
)


#avoid confusion view vs copy of a dataframe...
pandas.options.mode.copy_on_write = True

start_datetime, end_datetime = time_of_interest_from_prompt()

domain_mtg = 'cosmo1eqc1km' #cosmo1eqc1km or ccs4

#Path to useful folders
base_dir_mtg = MTGDIR / 'mtg_data/2024-0807/'
base_dir_ctth = MTGDIR / 'CTTH_data/2024/08/07/CTTH/'
base_dir_cth = MTGDIR / 'CMsaf/'
area_target = load_area(MTGDIR / 'areadef.yaml', domain_mtg)
out_dir = OUTDIR / 'RESULTS_parallax/'
out_dir.mkdir(parents=True, exist_ok=True)

########### Open the mtg and cloud top height data ###########

#mtg
available_times, mtg_filenames = get_MTG_filenames(base_dir_mtg,
                                  start_datetime.strftime('%Y-%m%d-%H:%M:%S'),
                                  end_datetime.strftime('%Y-%m%d-%H:%M:%S'),
                                  'LFL')

mtg_filenames = [os.path.join(MTGDIR, 'W_XX-EUMETSAT-Darmstadt,IMG+SAT,MTI1+LI-2-LFL--FD--CHK-BODY--ARC-NC4E_C_EUMT_20240807171018_L2PF_OPE_20240807170005_20240807171005_N__T_0103_0001.nc'),
                 os.path.join(MTGDIR, 'W_XX-EUMETSAT-Darmstadt,IMG+SAT,MTI1+LI-2-LFL--FD--CHK-BODY--ARC-NC4E_C_EUMT_20240807172018_L2PF_OPE_20240807171005_20240807172005_N__T_0104_0001.nc')]

print(f'MTG data : \n {mtg_filenames}\n ------- \n')

#Open mtg file and load the flashes information
mtg_scene = Scene(filenames = mtg_filenames, reader = 'li_l2_nc' )
mtg_scene.load(['latitude', 'longitude', 'flash_time', 'flash_id'])


#open cth file generated by cm SAF
cth_filename = [os.path.join(MTGDIR, 'CTXin20240807170000405SVMSGI1MD.nc')]
cth_scene = Scene(filenames = cth_filename, reader = 'cmsaf-claas2_l2_nc' )
cth_scene.load(['cth'])

#resample and compute xarray
cth_local_scene = cth_scene.resample(area_target, radius_of_influence = RADIUS_OF_INFLUENCE)
cth_dataset = cth_local_scene['cth'].compute()

print(f'\n----- CM saf CTH data : \n {cth_dataset}\n ------- \n')

#Convert the MTG data to dataframe and convert coordinates
area_extent = cth_dataset.area.area_extent
mtg_df_local = initialize_mtg_df_in_target_proj(mtg_scene['longitude'].values, mtg_scene['latitude'].values,
                                                flash_time= mtg_scene['flash_time'],
                                                flash_id = mtg_scene['flash_id'],
                                                target_proj = cth_dataset.area.proj_dict,
                                                area_extent=area_extent,
                                                start_datetime=start_datetime,
                                                end_datetime= end_datetime)

shape_y, shape_x  = cth_dataset.shape

#Compute the indices of the cm SAF data array for each flash location
xmin, ymin, xmax, ymax  = cth_dataset.area.area_extent
mtg_df_local['x_idcs'] = ((mtg_df_local['x'] - xmin) // ((xmax - xmin) / shape_x)).astype(int)
mtg_df_local['y_idcs'] = ((ymax - mtg_df_local['y']) // ((ymax - ymin) / shape_y)).astype(int)

#extract colormap from a pickle:
cth_cmap, norm = define_cth_colorbar(PATH_CTH_PAL)

###############################################################################################
#Apply parallax correction :
###############################################################################################
print('\n' + '#'*30 )
print('Apply parallax correction on: ')

print(f'\n {mtg_df_local} \n ------- \n')

(sat_lon, sat_lat, sat_alt) = (0,0,36000*1000)#satpos of meteosat-12 ? #TODO update with more accurate information (not in the metadata...)

x_idx = mtg_df_local['x_idcs'].astype(int)
y_idx = mtg_df_local['y_idcs'].astype(int)

height = cth_dataset.data[y_idx, x_idx]

#Deal with NaN values at location of the flashes:
count_nan = numpy.sum(numpy.isnan(height))
print(f'\n-------------\nThe number of pixel of CTH with NaN is : {count_nan}\n-----------\n')
if (count_nan)==0:
    corr_lon, corr_lat = get_parallax_corrected_lonlats(sat_lon = sat_lon, sat_lat=sat_lat, sat_alt= sat_alt,
                                          lon = mtg_df_local['longitude'], lat = mtg_df_local['latitude'], height = height)
else:

    height_adjusted, mtg_df_nan = handle_missing_heights(cth_dataset, height, x_idx, y_idx, mtg_df_local)
    corr_lon, corr_lat = get_parallax_corrected_lonlats(sat_lon = sat_lon, sat_lat=sat_lat, sat_alt= sat_alt,
                                          lon = mtg_df_local['longitude'].to_numpy(),
                                          lat = mtg_df_local['latitude'].to_numpy(), height = height_adjusted
                                          )

mtg_df_local['corr_x'], mtg_df_local['corr_y'] = lonlat_to_proj(lon = corr_lon, lat = corr_lat, target_proj=cth_dataset.area.proj_dict)

###############################################################################################
# PLOT the data
###############################################################################################
#Convert area_target from pyresample AreaDefinition type to a crs for cartopy
crs = area_target.to_cartopy_crs()

#process cth dataset
cth_dataset = cth_dataset.where(~numpy.isnan(cth_dataset), 25000)

#initiate geo.axes using subplot_kw argument:
fig, ax = plt.subplots(figsize = (8,6), subplot_kw=dict(projection=crs))

cth_dataset.plot(cmap = cth_cmap, norm = norm, alpha = 0.7)
ax.scatter(mtg_df_local['x'], mtg_df_local['y'], s = 0.3, alpha = 0.1, facecolor = 'red')
ax.scatter(mtg_df_local['corr_x'], mtg_df_local['corr_y'], s = 0.8, alpha = 0.3, facecolor = 'blue')
ax.scatter(mtg_df_nan['x'], mtg_df_nan['y'], marker = 'x', s = 5, linewidth = 0.6, alpha = 1, facecolor = 'white')
#geographical features
coastlines = ax.coastlines(linestyle='-', linewidth = 0.7, alpha=1, zorder = 0)
ax.add_feature(cartopy.feature.BORDERS, linestyle='-', linewidth = 0.5, alpha=1, zorder = 0)
ax.add_feature(cartopy.feature.RIVERS, linewidth = 0.5, alpha= 1, zorder = 0)
ax.add_feature(cartopy.feature.LAKES, linestyle = '-', linewidth = 0.5, alpha = 1, zorder = 0)

ax.gridlines(crs = crs, linewidth=0.5, color='gray', alpha=0.5, linestyle='--')
xticks_loc = ax.get_xticks()
ax.set_xticks(xticks_loc[1:-1])
ax.xaxis.set_major_formatter(FuncFormatter(ticks_meter_to_km))
plt.xlabel('x [km]')

ax.set_yticks(ax.get_yticks()[1:-1])
ax.yaxis.set_major_formatter(FuncFormatter(ticks_meter_to_km))
plt.ylabel('y [km]')

plt.text( x = 0.4, y = -0.11 , s = 'Copyright (c) (2022) EUMETSAT',
         color = 'silver', transform = ax.transAxes, ha = 'right', va = 'top')

plt.title(f'{datetime.strftime(start_datetime, '%Y-%d-%m %H:%M')} - {datetime.strftime(end_datetime, '%H:%M')}')
figure_path = out_dir / f"{datetime.strftime(start_datetime, '%y%d%m_%H:%M-')}{datetime.strftime(end_datetime, '%H:%M')}'_CMCTTH_LFL_NAN_'{domain_mtg}"
plt.savefig(figure_path, dpi = 300 )
print('Figure successfully saved at : ' + str(figure_path))
print('\n \n  *** Warnings satpy: *** \n')
plt.close(fig)
